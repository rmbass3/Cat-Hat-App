{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ryan\\\\Desktop\\\\Projects\\\\React_Projects\\\\cat-app\\\\src\\\\components\\\\Cat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDrag } from 'react-dnd';\nimport { Hat } from './Hat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cat() {\n  _s();\n\n  const [cat, setCat] = useState([]);\n  const [{\n    isOver\n  }, dropRef] = useDrop({\n    accept: 'hat',\n    drop: item => setCat(cat => !cat.includes(item) ? [...cat, item] : cat),\n    collect: monitor => ({\n      isOver: monitor.isOver()\n    })\n  });\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pets\",\n      children: [/*#__PURE__*/_jsxDEV(Hat, {\n        draggable: true,\n        id: hat.id,\n        name: hat.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cat-obj\",\n      ref: dropRef,\n      children: [cat.map(hat => /*#__PURE__*/_jsxDEV(Hat, {\n        id: hat.id,\n        name: hat.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 33\n      }, this)), isOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Drop Here!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 28\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Cat, \"Q4g8V5b3cBsecMWkhF3jScUWHps=\", true);\n\n_c = Cat;\nexport default Cat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cat\");","map":{"version":3,"sources":["C:/Users/Ryan/Desktop/Projects/React_Projects/cat-app/src/components/Cat.js"],"names":["React","useState","useDrag","Hat","Cat","cat","setCat","isOver","dropRef","useDrop","accept","drop","item","includes","collect","monitor","hat","id","name","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,GAAT,QAAoB,OAApB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AAEX,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBL,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAAC;AAAEM,IAAAA;AAAF,GAAD,EAAaC,OAAb,IAAwBC,OAAO,CAAC;AAClCC,IAAAA,MAAM,EAAE,KAD0B;AAElCC,IAAAA,IAAI,EAAGC,IAAD,IAAUN,MAAM,CAAED,GAAD,IACH,CAACA,GAAG,CAACQ,QAAJ,CAAaD,IAAb,CAAD,GAAsB,CAAC,GAAGP,GAAJ,EAASO,IAAT,CAAtB,GAAuCP,GADrC,CAFY;AAIlCS,IAAAA,OAAO,EAAGC,OAAD,KAAc;AACnBR,MAAAA,MAAM,EAAEQ,OAAO,CAACR,MAAR;AADW,KAAd;AAJyB,GAAD,CAArC;AASA,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACI,QAAC,GAAD;AAAK,QAAA,SAAS,MAAd;AAAe,QAAA,EAAE,EAAES,GAAG,CAACC,EAAvB;AAA2B,QAAA,IAAI,EAAED,GAAG,CAACE;AAArC;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,GAAG,EAAEV,OAA9B;AAAA,iBACKH,GAAG,CAACc,GAAJ,CAAQH,GAAG,iBAAI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAEA,GAAG,CAACC,EAAb;AAAiB,QAAA,IAAI,EAAED,GAAG,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA,cAAf,CADL,EAEKX,MAAM,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFf;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAvBQH,G;;KAAAA,G;AAyBT,eAAeA,GAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport { useDrag } from 'react-dnd'\r\nimport { Hat } from './Hat'\r\n\r\nfunction Cat() {\r\n\r\n    const [cat, setCat] = useState([])\r\n    const [{ isOver }, dropRef] = useDrop({\r\n        accept: 'hat',\r\n        drop: (item) => setCat((cat) => \r\n                            !cat.includes(item) ? [...cat, item] : cat),\r\n        collect: (monitor) => ({\r\n            isOver: monitor.isOver()\r\n        })\r\n    })\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className='pets'>\r\n                <Hat draggable id={hat.id} name={hat.name} />)\r\n            </div>\r\n            <div className='cat-obj' ref={dropRef}>\r\n                {cat.map(hat => <Hat id={hat.id} name={hat.name} />)}\r\n                {isOver && <div>Drop Here!</div>}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Cat;"]},"metadata":{},"sourceType":"module"}